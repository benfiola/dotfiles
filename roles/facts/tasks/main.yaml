---
- tags: always
  block:
    - name: set configuration facts
      ansible.builtin.set_fact:
        desktop_environment: "{{desktop_environment | default('kde')}}"
        dotfiles_path: "{{role_path | dirname | dirname | realpath}}"

    - name: set system facts
      ansible.builtin.set_fact:
        os_family: "{{ansible_facts['os_family'] | lower}}"
        system: "{{ansible_system | lower}}"
        architecture: "{{ansible_architecture | lower}}"
        distribution: "{{ansible_distribution | lower}}"
        release: "{{ansible_distribution_release | lower}}"
        username: "{{ansible_user_id}}"
        vm: false
        wsl: false

    - name: coerce aarch64 to arm64
      when: architecture == 'aarch64'
      ansible.builtin.set_fact:
        architecture: arm64

    - name: coerce x86_64 to amd64
      when: architecture == 'x86_64'
      ansible.builtin.set_fact:
        architecture: amd64

    - name: set system facts
      ansible.builtin.set_fact:
        linux: "{{system == 'linux'}}"
        darwin: "{{system == 'darwin'}}"
        debian: "{{os_family == 'debian'}}"
        archlinux: "{{os_family == 'archlinux'}}"
        kde: "{{desktop_environment == 'kde'}}"
        amd64: "{{architecture == 'amd64'}}"
        arm64: "{{architecture == 'arm64'}}"

    - name: set user fact
      ansible.builtin.user:
        name: "{{username}}"
      register: user

    - name: set user profile.d facts
      ansible.builtin.set_fact:
        user_profiled_path: "{{user.home}}/.profile.d"

    - when: linux
      block:
        - name: check wsl interop path
          ansible.builtin.stat:
            path: /proc/sys/fs/binfmt_misc/WSLInterop
          register: wsl_interop_file

        - name: set wsl fact
          when: wsl_interop_file.stat.exists
          ansible.builtin.set_fact:
            wsl: true

        - name: check system product name path
          ansible.builtin.stat:
            path: /sys/devices/virtual/dmi/id/product_name
          register: product_name_file

        - name: read system product name
          ansible.builtin.slurp:
            src: /sys/devices/virtual/dmi/id/product_name
          register: product_name
          when: product_name_file.stat.exists

        - name: set vm fact
          when: "product_name_file.stat.exists and 'vmware' in (product_name['content'] | b64decode | lower)"
          ansible.builtin.set_fact:
            vm: true

        - name: set brew path fact
          ansible.builtin.set_fact:
            brew_prefix: "{{prefix}}"
            brew_path: "{{prefix}}/bin"
          vars:
            prefix: /home/linuxbrew/.linuxbrew

    - when: darwin
      block:
        - name: set brew path fact
          ansible.builtin.set_fact:
            brew_prefix: "{{prefix}}"
            brew_path: "{{prefix}}/bin"
          vars:
            prefixes:
              amd64: /usr/local
              arm64: /opt/homebrew
            prefix: "{{prefixes[architecture]}}"
